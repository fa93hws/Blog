jobs:
  build-webpack:
    name: webpack
    needs:
      - install
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v1
      - id: cache-npm
        name: fetch node modules
        uses: actions/cache@v1
        with:
          key: '${{ runner.os }}-npm-${{ hashFiles(''web/package-lock.json'') }}'
          path: web/node_modules
      - id: npm-ci
        if: steps.cache-npm.outputs.cache-hit != 'true'
        name: install node modules
        run: npm ci
        working-directory: web
      - env:
          CI: 'true'
          DEBUG: webpack_options
        id: webpack
        name: Run webpack build
        run: npm run build
        working-directory: web
      - env:
          AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          AWS_REGION: ap-northeast-2
          AWS_S3_BUCKET: github-cd
          AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_ACCESS_KEY_VALUE }}'
          DEST_DIR: $GITHUB_REPOSITORY/$GITHUB_REF/$GITHUB_SHA/blog
          SOURCE_DIR: web/dist/blog
        id: deploy-to-s3
        name: Deploy to s3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: '--acl public-read --delete'
      - id: print-url
        name: Print deployed url
        run: echo github-cd.s3.ap-northeast-2.amazonaws.com/$GITHUB_REPOSITORY/$GITHUB_REF/$GITHUB_SHA/blog/index.html
  check-generated-files:
    name: Check generated files
    needs:
      - install
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v1
      - id: cache-npm
        name: fetch node modules
        uses: actions/cache@v1
        with:
          key: '${{ runner.os }}-npm-${{ hashFiles(''web/package-lock.json'') }}'
          path: web/node_modules
      - id: npm-ci
        if: steps.cache-npm.outputs.cache-hit != 'true'
        name: install node modules
        run: npm ci
        working-directory: web
      - id: web-ci
        name: Regenerate web-ci.yml
        run: 'npm run pipeline:update'
        working-directory: web
      - id: check-regenerated-files
        name: Check regenerated files
        run: git --no-pager diff --exit-code
        working-directory: web
  install:
    name: Install node modules
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v1
      - id: cache-npm
        name: fetch node modules
        uses: actions/cache@v1
        with:
          key: '${{ runner.os }}-npm-${{ hashFiles(''web/package-lock.json'') }}'
          path: web/node_modules
      - id: npm-ci
        if: steps.cache-npm.outputs.cache-hit != 'true'
        name: install node modules
        run: npm ci
        working-directory: web
  lint:
    name: Linting
    needs:
      - install
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v1
      - id: cache-npm
        name: fetch node modules
        uses: actions/cache@v1
        with:
          key: '${{ runner.os }}-npm-${{ hashFiles(''web/package-lock.json'') }}'
          path: web/node_modules
      - id: npm-ci
        if: steps.cache-npm.outputs.cache-hit != 'true'
        name: install node modules
        run: npm ci
        working-directory: web
      - id: eslint
        name: Check ESlint
        run: 'npm run lint:ts'
        working-directory: web
      - id: tscheck
        if: always()
        name: Check Typescripe
        run: 'npm run lint:ts:types'
        working-directory: web
      - id: prettier
        if: always()
        name: Check Prettier
        run: npm run format
        working-directory: web
  storybook:
    name: storybook
    needs:
      - install
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v1
      - id: cache-npm
        name: fetch node modules
        uses: actions/cache@v1
        with:
          key: '${{ runner.os }}-npm-${{ hashFiles(''web/package-lock.json'') }}'
          path: web/node_modules
      - id: npm-ci
        if: steps.cache-npm.outputs.cache-hit != 'true'
        name: install node modules
        run: npm ci
        working-directory: web
      - env:
          DEBUG: storybook_config
        id: storybook
        name: Run storybook build
        run: 'npm run storybook:build'
        working-directory: web
      - env:
          AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          AWS_REGION: ap-northeast-2
          AWS_S3_BUCKET: github-cd
          AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_ACCESS_KEY_VALUE }}'
          DEST_DIR: $GITHUB_REPOSITORY/$GITHUB_REF/$GITHUB_SHA/storybook
          SOURCE_DIR: web/dist/storybook
        id: deploy-to-s3
        name: Deploy to s3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: '--acl public-read --delete'
      - id: print-url
        name: Print deployed url
        run: echo github-cd.s3.ap-northeast-2.amazonaws.com/$GITHUB_REPOSITORY/$GITHUB_REF/$GITHUB_SHA/storybook/index.html
      - env:
          PERCY_TOKEN: '${{ secrets.PERCY_TOKEN }}'
        id: percy-storybook
        name: Run percy on storybook
        run: 'npm run percy:storybook'
        working-directory: web
  unit-test:
    name: Unit test
    needs:
      - install
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v1
      - id: cache-npm
        name: fetch node modules
        uses: actions/cache@v1
        with:
          key: '${{ runner.os }}-npm-${{ hashFiles(''web/package-lock.json'') }}'
          path: web/node_modules
      - id: npm-ci
        if: steps.cache-npm.outputs.cache-hit != 'true'
        name: install node modules
        run: npm ci
        working-directory: web
      - id: jest
        name: Run unit test
        run: npm run test
        working-directory: web
name: web
'on':
  - push
